<#@ template language="C#" debug="false" hostspecific="false" #>
<#@ assembly name="$(TargetDir)ModelToSql.dll"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ModelToSql.Model.T4" #>
/************************************************************************************
* <auto-generated>
*     此代码由T4工具自动生成。 By Harry
*     对此文件的更改可能会导致不正确的行为，并且如果
*     重新生成代码，这些更改将会丢失。
* </auto-generated>
/************************************************************************************/
using ModelToSql;
using System.Collections.Generic;
using ModelToSql.Model;
using IModelRespoity;
using Easy.Framework.Data.EF;
using Easy.Framework.Data.EF.Repositories;
using Easy.Framework.Data.EF.ExpressionHelper;
using Easy.Framework.Core.ExpressionHelper.Extensions;
using Easy.Framework.Core.Security;
using Easy.Framework.Core.Application.Services;
using Application;
using System;
namespace IModelRespoity
{    
<# 
foreach(var item in AssemblyHelper.GetT4List("ModelToSql",".Model"))
{    
#>
    /// <summary>
    /// <#=item.Description==null?"":item.Description#>仓储
    /// </summary>
    public class <#=item.Name#>Service:I<#=item.Name#>Service
	{
	 private readonly I<#=item.Name#>Repository _i<#=item.Name#>Repository;
	 public <#=item.Name#>Service(I<#=item.Name#>Repository i<#=item.Name#>Repository){ 
	 _i<#=item.Name#>Repository=i<#=item.Name#>Repository;
	 }
	  /// <summary>
        /// 获取列表数据
        /// </summary>
        /// <returns></returns>
	   public HttpPage<<#=item.Name#>> getdata(){
	    var pageModel = new HttpPage<<#=item.Name#>>();
            int total = 0;
            pageModel.ResultList = _i<#=item.Name#>Repository.GetAll()
                                   .Search(pageModel.Parameter)
                                   .OrderBy(pageModel.Ordering, null)
                                   .PageList(pageModel.PageIndex, pageModel.PageSize, out total);
            pageModel.Total = total;
            return pageModel;
	   }

	   /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
	    public void SoftDelete(Guid id)
        {
            _i<#=item.Name#>Repository.SoftDelete(id);
        }

		 /// <summary>
        /// 新增编辑
        /// </summary>
        /// <returns></returns>
		  public void Save(<#=item.Name #> entity)
        {
            entity.Timestamp = entity.Timestamp ?? new byte[0];
            if (entity.Timestamp.Length <= 0)
            {

                _i<#=item.Name#>Repository.Add(entity);
            }
            else
            {
                //编辑
                var model = _i<#=item.Name#>Repository.Find(entity.Id);
                //验证版本，如不需要可不写 _roleRepository.Update(model);方法
                model.Timestamp = entity.Timestamp;
                _i<#=item.Name#>Repository.Update(model);
            }
        }
	}
<# 
}
#>
}
