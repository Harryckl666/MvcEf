/************************************************************************************
* <auto-generated>
*     此代码由T4工具自动生成。 By Harry
*     对此文件的更改可能会导致不正确的行为，并且如果
*     重新生成代码，这些更改将会丢失。
* </auto-generated>
/************************************************************************************/
using ModelToSql;
using System.Collections.Generic;
using ModelToSql.Model;
using IModelRespoity;
using Easy.Framework.Data.EF;
using Easy.Framework.Data.EF.Repositories;
using Easy.Framework.Data.EF.ExpressionHelper;
using Easy.Framework.Core.ExpressionHelper.Extensions;
using Easy.Framework.Core.Security;
using Easy.Framework.Core.Application.Services;
using Application;
using System;
namespace IModelRespoity
{    
    /// <summary>
    /// 公司名称仓储
    /// </summary>
    public class Sys_CompanyService:ISys_CompanyService
	{
	 private readonly ISys_CompanyRepository _iSys_CompanyRepository;
	 public Sys_CompanyService(ISys_CompanyRepository iSys_CompanyRepository){ 
	 _iSys_CompanyRepository=iSys_CompanyRepository;
	 }
	  /// <summary>
        /// 获取列表数据
        /// </summary>
        /// <returns></returns>
	   public HttpPage<Sys_Company> getdata(){
	    var pageModel = new HttpPage<Sys_Company>();
            int total = 0;
            pageModel.ResultList = _iSys_CompanyRepository.GetAll()
                                   .Search(pageModel.Parameter)
                                   .OrderBy(pageModel.Ordering, null)
                                   .PageList(pageModel.PageIndex, pageModel.PageSize, out total);
            pageModel.Total = total;
            return pageModel;
	   }

	   /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
	    public void SoftDelete(Guid id)
        {
            _iSys_CompanyRepository.SoftDelete(id);
        }

		 /// <summary>
        /// 新增编辑
        /// </summary>
        /// <returns></returns>
		  public void Save(Sys_Company entity)
        {
            entity.Timestamp = entity.Timestamp ?? new byte[0];
            if (entity.Timestamp.Length <= 0)
            {

                _iSys_CompanyRepository.Add(entity);
            }
            else
            {
                //编辑
                var model = _iSys_CompanyRepository.Find(entity.Id);
                //验证版本，如不需要可不写 _roleRepository.Update(model);方法
                model.Timestamp = entity.Timestamp;
                _iSys_CompanyRepository.Update(model);
            }
        }
	}
    /// <summary>
    /// 仓储
    /// </summary>
    public class Sys_lcyService:ISys_lcyService
	{
	 private readonly ISys_lcyRepository _iSys_lcyRepository;
	 public Sys_lcyService(ISys_lcyRepository iSys_lcyRepository){ 
	 _iSys_lcyRepository=iSys_lcyRepository;
	 }
	  /// <summary>
        /// 获取列表数据
        /// </summary>
        /// <returns></returns>
	   public HttpPage<Sys_lcy> getdata(){
	    var pageModel = new HttpPage<Sys_lcy>();
            int total = 0;
            pageModel.ResultList = _iSys_lcyRepository.GetAll()
                                   .Search(pageModel.Parameter)
                                   .OrderBy(pageModel.Ordering, null)
                                   .PageList(pageModel.PageIndex, pageModel.PageSize, out total);
            pageModel.Total = total;
            return pageModel;
	   }

	   /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
	    public void SoftDelete(Guid id)
        {
            _iSys_lcyRepository.SoftDelete(id);
        }

		 /// <summary>
        /// 新增编辑
        /// </summary>
        /// <returns></returns>
		  public void Save(Sys_lcy entity)
        {
            entity.Timestamp = entity.Timestamp ?? new byte[0];
            if (entity.Timestamp.Length <= 0)
            {

                _iSys_lcyRepository.Add(entity);
            }
            else
            {
                //编辑
                var model = _iSys_lcyRepository.Find(entity.Id);
                //验证版本，如不需要可不写 _roleRepository.Update(model);方法
                model.Timestamp = entity.Timestamp;
                _iSys_lcyRepository.Update(model);
            }
        }
	}
    /// <summary>
    /// 角色仓储
    /// </summary>
    public class Sys_UserService:ISys_UserService
	{
	 private readonly ISys_UserRepository _iSys_UserRepository;
	 public Sys_UserService(ISys_UserRepository iSys_UserRepository){ 
	 _iSys_UserRepository=iSys_UserRepository;
	 }
	  /// <summary>
        /// 获取列表数据
        /// </summary>
        /// <returns></returns>
	   public HttpPage<Sys_User> getdata(){
	    var pageModel = new HttpPage<Sys_User>();
            int total = 0;
            pageModel.ResultList = _iSys_UserRepository.GetAll()
                                   .Search(pageModel.Parameter)
                                   .OrderBy(pageModel.Ordering, null)
                                   .PageList(pageModel.PageIndex, pageModel.PageSize, out total);
            pageModel.Total = total;
            return pageModel;
	   }

	   /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
	    public void SoftDelete(Guid id)
        {
            _iSys_UserRepository.SoftDelete(id);
        }

		 /// <summary>
        /// 新增编辑
        /// </summary>
        /// <returns></returns>
		  public void Save(Sys_User entity)
        {
            entity.Timestamp = entity.Timestamp ?? new byte[0];
            if (entity.Timestamp.Length <= 0)
            {

                _iSys_UserRepository.Add(entity);
            }
            else
            {
                //编辑
                var model = _iSys_UserRepository.Find(entity.Id);
                //验证版本，如不需要可不写 _roleRepository.Update(model);方法
                model.Timestamp = entity.Timestamp;
                _iSys_UserRepository.Update(model);
            }
        }
	}
}
